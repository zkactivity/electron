import("build/asar.gni")
import("build/npm.gni")
import("buildflags/buildflags.gni")
import("electron_paks.gni")
import("filenames.gni")
import("//build/config/locales.gni")
import("//build/config/win/manifest.gni")
import("//pdf/features.gni")
import("//third_party/ffmpeg/ffmpeg_options.gni")
import("//third_party/widevine/cdm/widevine.gni")
import("//tools/grit/repack.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
import("//v8/snapshot_toolchain.gni")

if (is_mac) {
  import("//build/config/mac/rules.gni")
  import("//third_party/icu/config.gni")
  import("//v8/gni/v8.gni")
}

if (is_linux) {
  import("//build/config/linux/pkg_config.gni")

  pkg_config("gio_unix") {
    packages = [ "gio-unix-2.0" ]
  }
}

branding = read_file("atom/app/BRANDING.json", "json")
electron_project_name = branding.project_name
electron_product_name = branding.product_name
electron_mac_bundle_id = branding.mac_bundle_id

if (is_mas_build) {
  assert(is_mac,
         "It doesn't make sense to build a MAS build on a non-mac platform")
}

config("branding") {
  defines = [
    "ATOM_PRODUCT_NAME=\"$electron_product_name\"",
    "ATOM_PROJECT_NAME=\"$electron_project_name\"",
  ]
}

npm_action("atom_browserify_sandbox") {
  deps = [
    ":atom_js2c_copy",
  ]

  sandbox_args = [
    "lib/sandboxed_renderer/init.js",
    "-r",
    "./lib/sandboxed_renderer/api/exports/electron.js:electron",
    "-r",
    "./lib/sandboxed_renderer/api/exports/fs.js:fs",
    "-r",
    "./lib/sandboxed_renderer/api/exports/os.js:os",
    "-r",
    "./lib/sandboxed_renderer/api/exports/path.js:path",
    "-r",
    "./lib/sandboxed_renderer/api/exports/child_process.js:child_process",
    "-t",
    "aliasify",
  ]

  inputs = [
    "lib/sandboxed_renderer/init.js",
    "lib/sandboxed_renderer/api/exports/electron.js",
    "lib/sandboxed_renderer/api/exports/fs.js",
    "lib/sandboxed_renderer/api/exports/os.js",
    "lib/sandboxed_renderer/api/exports/path.js",
    "lib/sandboxed_renderer/api/exports/child_process.js",
  ]
  outputs = [
    "$target_gen_dir/js2c/preload_bundle.js",
  ]

  script = "browserify"
  args = sandbox_args + [
           "-o",
           rebase_path(outputs[0]),
         ]
}

npm_action("atom_browserify_isolated") {
  deps = [
    ":atom_js2c_copy",
  ]

  inputs = [
    "lib/isolated_renderer/init.js",
  ]
  outputs = [
    "$target_gen_dir/js2c/isolated_bundle.js",
  ]

  script = "browserify"
  args = inputs + [
           "-t",
           "aliasify",
           "-o",
           rebase_path(outputs[0]),
         ]
}

copy("atom_js2c_copy") {
  sources = [
    "lib/common/asar.js",
    "lib/common/asar_init.js",
  ]
  outputs = [
    "$target_gen_dir/js2c/{{source_file_part}}",
  ]
}

action("atom_js2c") {
  deps = [
    ":atom_browserify_isolated",
    ":atom_browserify_sandbox",
    ":atom_js2c_copy",
  ]

  js2c_sources = filenames.js2c_sources

  browserify_sources = [
    "$target_gen_dir/js2c/isolated_bundle.js",
    "$target_gen_dir/js2c/preload_bundle.js",
  ]

  inputs = js2c_sources + browserify_sources

  outputs = [
    "$target_gen_dir/atom_natives.h",
  ]

  script = "tools/js2c.py"
  args = [ rebase_path("//third_party/electron_node") ] +
         rebase_path(outputs, root_build_dir) +
         [ rebase_path("$target_gen_dir/js2c", root_build_dir) ]
}

asar("js2asar") {
  sources = filenames.js_sources
  if (enable_desktop_capturer) {
    sources += [
      "lib/browser/desktop-capturer.js",
      "lib/renderer/api/desktop-capturer.js",
    ]
  }
  if (enable_view_api) {
    sources += [
      "lib/browser/api/box-layout.js",
      "lib/browser/api/button.js",
      "lib/browser/api/label-button.js",
      "lib/browser/api/layout-manager.js",
      "lib/browser/api/text-field.js",
    ]
  }
  outputs = [
    "$root_out_dir/resources/electron.asar",
  ]
  root = "lib"
}

asar("app2asar") {
  sources = filenames.default_app_sources
  outputs = [
    "$root_out_dir/resources/default_app.asar",
  ]
  root = "default_app"
}

static_library("electron_lib") {
  configs += [ "//v8:external_startup_data" ]
  configs += [ "//third_party/electron_node:node_internals" ]

  public_configs = [ ":branding" ]

  deps = [
    ":atom_js2c",
    "brightray",
    "buildflags",
    "chromium_src:chrome",
    "native_mate",
    "//base",
    "//base:i18n",
    "//chrome/common:constants",
    "//components/network_session_configurator/common",
    "//components/prefs",
    "//components/printing/common",
    "//components/viz/service",
    "//content/public/app:both",
    "//content/public/child",
    "//device/geolocation",
    "//gin",
    "//net:net_resources",
    "//ppapi/host",
    "//ppapi/proxy",
    "//ppapi/shared_impl",
    "//printing",
    "//skia",
    "//third_party/blink/public:blink",
    "//third_party/boringssl",
    "//third_party/electron_node:node_lib",
    "//third_party/leveldatabase",
    "//third_party/libyuv",
    "//third_party/webrtc_overrides:init_webrtc",
    "//third_party/widevine/cdm:headers",
    "//ui/events:dom_keycode_converter",
    "//ui/gl",
    "//ui/views",
    "//v8",
  ]

  # TODO: this requires a visibility patch to chromium src. it would be better
  # to use the publicly-available API, which I think is mojo-based. Once
  # electron switches to using the public API, we can remove this from the deps
  # list and remove the visibility patch from chromium.
  deps += [ "//services/device/wake_lock/power_save_blocker" ]

  include_dirs = [
    "chromium_src",
    ".",
    "$target_gen_dir",

    # TODO(nornagon): replace usage of SchemeRegistry by an actually exported
    # API of blink, then remove this from the include_dirs.
    "//third_party/blink/renderer",
  ]

  defines = []
  libs = []

  extra_source_filters = []
  if (!is_linux) {
    extra_source_filters += [
      "*\bx/*",
      "*_x11.h",
      "*_x11.cc",
      "*_gtk.h",
      "*_gtk.cc",
      "*\blibrary_loaders/*",
    ]
  }
  if (!is_win) {
    extra_source_filters += [
      "*\bwin_*.h",
      "*\bwin_*.cc",
    ]
  }
  if (is_mac) {
    extra_source_filters += [
      "*_views.cc",
      "*_views.h",
      "*\bviews/*",
      "*/autofill_popup.cc",
      "*/autofill_popup.h",
    ]
  }

  set_sources_assignment_filter(
      sources_assignment_filter + extra_source_filters)
  sources = filenames.lib_sources
  set_sources_assignment_filter(sources_assignment_filter)

  sources += [ "$target_gen_dir/atom_natives.h" ]

  if (is_component_build) {
    defines += [ "NODE_SHARED_MODE" ]
  }

  if (enable_fake_location_provider) {
    defines += [ "OVERRIDE_LOCATION_PROVIDER" ]
    sources += [
      "atom/browser/fake_location_provider.cc",
      "atom/browser/fake_location_provider.h",
    ]
  }

  if (is_mac) {
    deps += [
      "//third_party/crashpad/crashpad/client",
      "//ui/accelerated_widget_mac",
    ]
    include_dirs += [
      # NOTE(nornagon): other chromium files use the full path to include
      # crashpad; this is just here for compatibility between GN and GYP, so that
      # the #includes can be agnostic about where crashpad is vendored.
      "//third_party/crashpad",
    ]
    if (is_mas_build) {
      deps -= [ "//third_party/crashpad/crashpad/client" ]
      sources += [ "atom/browser/api/atom_api_app_mas.mm" ]
      sources -= [
        "atom/browser/auto_updater_mac.mm",
        "atom/common/crash_reporter/crash_reporter_mac.h",
        "atom/common/crash_reporter/crash_reporter_mac.mm",
      ]
      defines += [ "MAS_BUILD" ]
    } else {
      libs += [
        "Squirrel.framework",
        "ReactiveCocoa.framework",
        "Mantle.framework",
      ]
      cflags_objcc = [
        "-F",
        rebase_path("external_binaries", root_build_dir),
      ]

      # ReactiveCocoa which is used by Squirrel requires using __weak.
      cflags_objcc += [ "-fobjc-weak" ]
    }
  }
  if (is_linux) {
    deps += [
      "//build/config/linux/gtk",
      "//chrome/browser/ui/libgtkui",
      "//device/bluetooth",
      "//ui/events/devices/x11",
      "//ui/events/platform/x11",
      "//ui/native_theme",
      "//ui/views/controls/webview",
      "//ui/wm",
    ]
    configs += [ ":gio_unix" ]
    defines += [
      # Disable warnings for g_settings_list_schemas.
      "GLIB_DISABLE_DEPRECATION_WARNINGS",
    ]
    sources += filenames.lib_sources_linux
    sources += filenames.lib_sources_nss
  }
  if (is_win) {
    sources += filenames.lib_sources_win
    libs += [ "dwmapi.lib" ]
  }
  if (is_linux || is_win) {
    deps += [ "//third_party/breakpad:client" ]
    include_dirs += [ "//third_party/breakpad" ]
  }

  if (enable_pdf) {
    deps += [ "//pdf" ]
  }

  if (enable_run_as_node) {
    sources += [
      "atom/app/node_main.cc",
      "atom/app/node_main.h",
    ]
  }

  if (enable_osr) {
    sources += [
      "atom/browser/api/atom_api_web_contents_osr.cc",
      "atom/browser/osr/osr_output_device.cc",
      "atom/browser/osr/osr_output_device.h",
      "atom/browser/osr/osr_render_widget_host_view.cc",
      "atom/browser/osr/osr_render_widget_host_view.h",
      "atom/browser/osr/osr_render_widget_host_view_mac.mm",
      "atom/browser/osr/osr_view_proxy.cc",
      "atom/browser/osr/osr_view_proxy.h",
      "atom/browser/osr/osr_web_contents_view.cc",
      "atom/browser/osr/osr_web_contents_view.h",
      "atom/browser/osr/osr_web_contents_view_mac.mm",
    ]
    deps += [
      "//components/viz/service",
      "//services/viz/public/interfaces",
      "//ui/compositor",
    ]
  }

  if (enable_desktop_capturer) {
    if (is_component_build && is_win) {
      # On windows the implementation relies on unexported
      # DxgiDuplicatorController class.
      deps += [ "//third_party/webrtc/modules/desktop_capture" ]
    }
    sources += [
      "atom/browser/api/atom_api_desktop_capturer.cc",
      "atom/browser/api/atom_api_desktop_capturer.h",
    ]
  }

  if (enable_view_api) {
    sources += [
      "atom/browser/api/atom_api_box_layout.cc",
      "atom/browser/api/atom_api_box_layout.h",
      "atom/browser/api/atom_api_button.cc",
      "atom/browser/api/atom_api_button.h",
      "atom/browser/api/atom_api_label_button.cc",
      "atom/browser/api/atom_api_label_button.h",
      "atom/browser/api/atom_api_layout_manager.cc",
      "atom/browser/api/atom_api_layout_manager.h",
      "atom/browser/api/atom_api_text_field.cc",
      "atom/browser/api/atom_api_text_field.h",
    ]
  }

  if (enable_pepper_flash) {
    deps += [ "components/pepper_flash" ]
  }

  if (enable_widevine) {
    sources += [
      "//chrome/renderer/media/chrome_key_systems.cc",
      "//chrome/renderer/media/chrome_key_systems.h",
      "//chrome/renderer/media/chrome_key_systems_provider.cc",
      "//chrome/renderer/media/chrome_key_systems_provider.h",
    ]
    deps += [ "//components/cdm/renderer" ]
  }
}

electron_paks("packed_resources") {
  if (is_mac) {
    output_dir = "$root_gen_dir/electron_repack"
    copy_data_to_bundle = true
  } else {
    output_dir = root_out_dir
  }
}

if (is_mac) {
  electron_framework_name = "$electron_product_name Framework"
  electron_helper_name = "$electron_product_name Helper"
  electron_login_helper_name = "$electron_product_name Login Helper"
  electron_framework_version = "A"

  mac_xib_bundle_data("electron_xibs") {
    sources = [
      "atom/common/resources/mac/MainMenu.xib",
    ]
  }

  bundle_data("electron_framework_resources") {
    public_deps = [
      ":packed_resources",
    ]
    sources = []
    if (icu_use_data_file) {
      sources += [ "$root_out_dir/icudtl.dat" ]
      public_deps += [ "//third_party/icu:icudata" ]
    }
    if (v8_use_external_startup_data) {
      sources += [ "$root_out_dir/natives_blob.bin" ]
      public_deps += [ "//v8" ]
      if (use_v8_context_snapshot) {
        sources += [ "$root_out_dir/v8_context_snapshot.bin" ]
        public_deps += [ "//tools/v8_context_snapshot" ]
      } else {
        sources += [ "$root_out_dir/snapshot_blob.bin" ]
      }
    }
    outputs = [
      "{{bundle_resources_dir}}/{{source_file_part}}",
    ]
  }

  if (!is_component_build) {
    bundle_data("electron_framework_libraries") {
      sources = []
      public_deps = []
      if (is_component_ffmpeg) {
        sources += [ "$root_out_dir/libffmpeg.dylib" ]
        public_deps += [ "//third_party/ffmpeg:ffmpeg" ]
      }
      outputs = [
        "{{bundle_contents_dir}}/Libraries/{{source_file_part}}",
      ]
    }
  } else {
    group("electron_framework_libraries") {
    }
  }

  bundle_data("electron_crashpad_helper") {
    sources = [
      "$root_out_dir/crashpad_handler",
    ]

    outputs = [
      "{{bundle_resources_dir}}/{{source_file_part}}",
    ]

    public_deps = [
      "//third_party/crashpad/crashpad/handler:crashpad_handler",
    ]
  }

  mac_framework_bundle("electron_framework") {
    output_name = electron_framework_name
    framework_version = electron_framework_version
    framework_contents = [
      "Resources",
      "Libraries",
    ]
    public_deps = [
      ":electron_lib",
    ]
    deps = [
      ":electron_framework_libraries",
      ":electron_framework_resources",
      ":electron_xibs",
    ]
    if (!is_mas_build) {
      deps += [ ":electron_crashpad_helper" ]
    }
    info_plist = "atom/common/resources/mac/Info.plist"

    electron_version = read_file("VERSION", "trim string")
    extra_substitutions = [
      "ATOM_BUNDLE_ID=$electron_mac_bundle_id.framework",
      "ELECTRON_VERSION=$electron_version",
    ]

    include_dirs = [ "." ]
    sources = filenames.framework_sources

    libs = [
      "Carbon.framework",
      "QuartzCore.framework",
      "Quartz.framework",
      "Security.framework",
      "SecurityInterface.framework",
      "ServiceManagement.framework",
      "StoreKit.framework",
    ]
    ldflags = [
      "-F",
      rebase_path("external_binaries", root_build_dir),
      "-Wl,-install_name,@rpath/$output_name.framework/$output_name",
      "-rpath",
      "@loader_path/Libraries",
    ]
    if (is_component_build) {
      ldflags += [
        "-rpath",
        "@executable_path/../../../../../..",
      ]
    }
  }

  mac_app_bundle("electron_helper_app") {
    output_name = electron_helper_name
    deps = [
      ":electron_framework+link",
    ]
    sources = filenames.app_sources
    include_dirs = [ "." ]
    info_plist = "atom/renderer/resources/mac/Info.plist"
    extra_substitutions = [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id.helper" ]
    ldflags = [
      "-rpath",
      "@executable_path/../../..",
    ]
  }

  bundle_data("electron_app_framework_bundle_data") {
    sources = [
      "$root_out_dir/$electron_framework_name.framework",
      "$root_out_dir/$electron_helper_name.app",
    ]
    if (!is_mas_build) {
      sources += [
        "external_binaries/Mantle.framework",
        "external_binaries/ReactiveCocoa.framework",
        "external_binaries/Squirrel.framework",
      ]
    }
    outputs = [
      "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}",
    ]
    public_deps = [
      ":electron_framework+link",
      ":electron_helper_app",
    ]
  }

  mac_app_bundle("electron_login_helper") {
    output_name = electron_login_helper_name
    sources = filenames.login_helper_sources
    include_dirs = [ "." ]
    libs = [ "AppKit.framework" ]
    info_plist = "atom/app/resources/mac/loginhelper-Info.plist"
    extra_substitutions =
        [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id.loginhelper" ]
  }

  bundle_data("electron_login_helper_app") {
    public_deps = [
      ":electron_login_helper",
    ]
    sources = [
      "$root_out_dir/$electron_login_helper_name.app",
    ]
    outputs = [
      "{{bundle_contents_dir}}/Library/LoginItems",
    ]
  }

  bundle_data("electron_app_resources") {
    public_deps = [
      ":app2asar",
      ":js2asar",
    ]
    sources = [
      "$root_out_dir/resources/default_app.asar",
      "$root_out_dir/resources/electron.asar",
      "atom/browser/resources/mac/electron.icns",
    ]
    outputs = [
      "{{bundle_resources_dir}}/{{source_file_part}}",
    ]
  }

  mac_app_bundle("electron_app") {
    output_name = electron_product_name
    sources = filenames.app_sources
    include_dirs = [ "." ]
    deps = [
      ":electron_app_framework_bundle_data",
      ":electron_app_resources",
    ]
    if (is_mas_build) {
      deps += [ ":electron_login_helper_app" ]
    }
    info_plist = "atom/browser/resources/mac/Info.plist"
    extra_substitutions = [ "ATOM_BUNDLE_ID=$electron_mac_bundle_id" ]
    ldflags = [
      "-rpath",
      "@executable_path/../Frameworks",
    ]
  }
} else {
  windows_manifest("electron_app_manifest") {
    sources = [
      "atom/browser/resources/win/disable_window_filtering.manifest",
      "atom/browser/resources/win/dpi_aware.manifest",
      as_invoker_manifest,
      common_controls_manifest,
      default_compatibility_manifest,
    ]
  }

  executable("electron_app") {
    output_name = electron_project_name
    sources = filenames.app_sources
    include_dirs = [ "." ]
    deps = [
      ":app2asar",
      ":electron_app_manifest",
      ":electron_lib",
      ":js2asar",
      ":packed_resources",
      "//build/config:exe_and_shlib_deps",
      "//content:sandbox_helper_win",
      "//ui/strings",
    ]

    data = []

    data += [ "$root_out_dir/resources.pak" ]
    data += [ "$root_out_dir/chrome_100_percent.pak" ]
    if (enable_hidpi) {
      data += [ "$root_out_dir/chrome_200_percent.pak" ]
    }
    foreach(locale, locales) {
      data += [ "$root_out_dir/locales/$locale.pak" ]
    }

    if (!is_mac) {
      data += [ "$root_out_dir/resources/default_app.asar" ]
      data += [ "$root_out_dir/resources/electron.asar" ]
    }

    public_deps = [
      "//tools/v8_context_snapshot:v8_context_snapshot",
    ]

    if (is_win) {
      sources += [
        # TODO: we should be generating our .rc files more like how chrome does
        "atom/browser/resources/win/atom.ico",
        "atom/browser/resources/win/atom.rc",
        "atom/browser/resources/win/resources.h",
      ]

      deps += [
        "//third_party/breakpad:breakpad_handler",
        "//third_party/breakpad:breakpad_sender",
        "//ui/native_theme:native_theme_browser",
        "//ui/shell_dialogs",
        "//ui/views/controls/webview",
        "//ui/wm",
        "//ui/wm/public",
      ]

      libs = [
        "comctl32.lib",
        "uiautomationcore.lib",
        "wtsapi32.lib",
      ]

      configs += [ "//build/config/win:windowed" ]

      ldflags = [
        # Windows 7 doesn't have these DLLs.
        # TODO: are there other DLLs we need to list here to be win7
        # compatible?
        "/DELAYLOAD:api-ms-win-core-winrt-l1-1-0.dll",
        "/DELAYLOAD:api-ms-win-core-winrt-string-l1-1-0.dll",
      ]
    }
    if (is_linux) {
      if (!is_component_build && is_component_ffmpeg) {
        configs += [ "//build/config/gcc:rpath_for_built_shared_libraries" ]
      }
    }
  }
}

group("electron_tests") {
  testonly = true

  deps = [
    ":chromium_browsertests",
    ":chromium_unittests",
  ]
}

group("chromium_unittests") {
  testonly = true

  deps = [
    "//base:base_unittests",
    "//cc:cc_unittests",
    "//cc/blink:cc_blink_unittests",
    "//content/test:content_unittests",
    "//crypto:crypto_unittests",
    "//device:device_unittests",
    "//gin:gin_unittests",
    "//gpu:gpu_unittests",
    "//ipc:ipc_tests",
    "//media:media_unittests",
    "//media/capture:capture_unittests",
    "//media/midi:midi_unittests",
    "//media/mojo:media_mojo_unittests",
    "//mojo:mojo_unittests",
    "//mojo/common:mojo_common_unittests",
    "//net:net_unittests",
    "//ppapi:ppapi_unittests",
    "//printing:printing_unittests",
    "//skia:skia_unittests",
    "//sql:sql_unittests",
    "//storage:storage_unittests",
    "//third_party/angle/src/tests:angle_unittests",
    "//third_party/blink/public:all_blink",
    "//third_party/blink/public:test_support",
    "//third_party/leveldatabase:env_chromium_unittests",
    "//tools/gn:gn_unittests",
    "//ui/base:ui_base_unittests",
    "//ui/compositor:compositor_unittests",
    "//ui/display:display_unittests",
    "//ui/events:events_unittests",
    "//ui/gl:gl_unittests",
    "//url:url_unittests",
    "//url/ipc:url_ipc_unittests",
    "//v8/test/unittests:unittests",
  ]

  if (is_linux) {
    deps += [
      "//net:disk_cache_memory_test",
      "//sandbox/linux:sandbox_linux_unittests",
    ]

    if (use_dbus) {
      deps += [ "//dbus:dbus_unittests" ]
    }
  }
}

group("chromium_browsertests") {
  testonly = true

  deps = [
    "//content/test:content_browsertests",
  ]
}

template("dist_zip") {
  _runtime_deps_target = "${target_name}__deps"
  _runtime_deps_file =
      "$root_out_dir/gen.runtime/" + get_label_info(target_name, "dir") + "/" +
      get_label_info(target_name, "name") + ".runtime_deps"

  group(_runtime_deps_target) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "data_deps",
                             "data",
                           ])
    write_runtime_deps = _runtime_deps_file
  }

  action(target_name) {
    script = "//electron/build/zip.py"
    deps = [
      ":$_runtime_deps_target",
    ]
    forward_variables_from(invoker, [ "outputs" ])
    args = rebase_path(outputs + [ _runtime_deps_file ], root_build_dir) + [
             target_cpu,
             target_os,
           ]
  }
}

copy("electron_license") {
  sources = [
    "LICENSE",
  ]
  outputs = [
    "$root_build_dir/{{source_file_part}}",
  ]
}
copy("chromium_licenses") {
  deps = [
    "//components/resources:about_credits",
  ]
  sources = [
    "$root_gen_dir/components/resources/about_credits.html",
  ]
  outputs = [
    "$root_build_dir/LICENSES.chromium.html",
  ]
}

group("licenses") {
  data_deps = [
    ":electron_license",
    ":chromium_licenses",
  ]
}

copy("electron_version") {
  sources = [
    "VERSION"
  ]
  outputs = [
    "$root_build_dir/version"
  ]
}

dist_zip("electron_dist_zip") {
  data_deps = [
    ":electron_app",
    ":licenses",
    ":electron_version",
  ]
  outputs = [
    "$root_build_dir/dist.zip",
  ]
}

dist_zip("electron_ffmpeg_zip") {
  data_deps = [
    "//third_party/ffmpeg",
  ]
  outputs = [
    "$root_build_dir/ffmpeg.zip",
  ]
}

dist_zip("electron_chromedriver_zip") {
  data_deps = [
    "//chrome/test/chromedriver",
    ":licenses",
  ]
  outputs = [
    "$root_build_dir/chromedriver.zip",
  ]
}

dist_zip("electron_mksnapshot_zip") {
  data_deps = [
    "//v8:mksnapshot($v8_snapshot_toolchain)",
    ":licenses",
  ]
  outputs = [
    "$root_build_dir/mksnapshot.zip",
  ]
}

group("electron") {
  deps = [
    ":electron_app",
  ]
}
